{"ast":null,"code":"import { AnimationType } from '../render/utils/types.mjs';\nimport { useDomEvent } from '../events/use-dom-event.mjs';\nimport { useRef, useCallback } from 'react';\n\nfunction useFocusGesture({\n  whileFocus,\n  visualElement\n}) {\n  const isFocusActive = useRef(false);\n  const {\n    animationState\n  } = visualElement;\n  const onFocus = useCallback(() => {\n    let isFocusVisible = false;\n    /**\n     * If this element doesn't match focus-visible then don't\n     * apply whileHover. But, if matches throws that focus-visible\n     * is not a valid selector then in that browser outline styles will be applied\n     * to the element by default and we want to match that behaviour with whileFocus.\n     */\n\n    try {\n      isFocusVisible = visualElement.current.matches(\":focus-visible\");\n    } catch (e) {\n      isFocusVisible = true;\n    }\n\n    if (!isFocusVisible || !animationState) return;\n    animationState.setActive(AnimationType.Focus, true);\n    isFocusActive.current = true;\n  }, [animationState]);\n  const onBlur = useCallback(() => {\n    if (!isFocusActive.current || !animationState) return;\n    animationState.setActive(AnimationType.Focus, false);\n    isFocusActive.current = false;\n  }, [animationState]);\n  useDomEvent(visualElement, \"focus\", whileFocus ? onFocus : undefined);\n  useDomEvent(visualElement, \"blur\", whileFocus ? onBlur : undefined);\n}\n\nexport { useFocusGesture };","map":{"version":3,"sources":["/home/abdulsaabir/Documents/Projects/React/Tutorial Projects/Photo-Gallery-With-React-Firebase/node_modules/framer-motion/dist/es/gestures/use-focus-gesture.mjs"],"names":["AnimationType","useDomEvent","useRef","useCallback","useFocusGesture","whileFocus","visualElement","isFocusActive","animationState","onFocus","isFocusVisible","current","matches","e","setActive","Focus","onBlur","undefined"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,OAApC;;AAEA,SAASC,eAAT,CAAyB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAzB,EAAyD;AACrD,QAAMC,aAAa,GAAGL,MAAM,CAAC,KAAD,CAA5B;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAqBF,aAA3B;AACA,QAAMG,OAAO,GAAGN,WAAW,CAAC,MAAM;AAC9B,QAAIO,cAAc,GAAG,KAArB;AACA;;;;;;;AAMA,QAAI;AACAA,MAAAA,cAAc,GAAGJ,aAAa,CAACK,OAAd,CAAsBC,OAAtB,CAA8B,gBAA9B,CAAjB;AACH,KAFD,CAGA,OAAOC,CAAP,EAAU;AACNH,MAAAA,cAAc,GAAG,IAAjB;AACH;;AACD,QAAI,CAACA,cAAD,IAAmB,CAACF,cAAxB,EACI;AACJA,IAAAA,cAAc,CAACM,SAAf,CAAyBd,aAAa,CAACe,KAAvC,EAA8C,IAA9C;AACAR,IAAAA,aAAa,CAACI,OAAd,GAAwB,IAAxB;AACH,GAlB0B,EAkBxB,CAACH,cAAD,CAlBwB,CAA3B;AAmBA,QAAMQ,MAAM,GAAGb,WAAW,CAAC,MAAM;AAC7B,QAAI,CAACI,aAAa,CAACI,OAAf,IAA0B,CAACH,cAA/B,EACI;AACJA,IAAAA,cAAc,CAACM,SAAf,CAAyBd,aAAa,CAACe,KAAvC,EAA8C,KAA9C;AACAR,IAAAA,aAAa,CAACI,OAAd,GAAwB,KAAxB;AACH,GALyB,EAKvB,CAACH,cAAD,CALuB,CAA1B;AAMAP,EAAAA,WAAW,CAACK,aAAD,EAAgB,OAAhB,EAAyBD,UAAU,GAAGI,OAAH,GAAaQ,SAAhD,CAAX;AACAhB,EAAAA,WAAW,CAACK,aAAD,EAAgB,MAAhB,EAAwBD,UAAU,GAAGW,MAAH,GAAYC,SAA9C,CAAX;AACH;;AAED,SAASb,eAAT","sourcesContent":["import { AnimationType } from '../render/utils/types.mjs';\nimport { useDomEvent } from '../events/use-dom-event.mjs';\nimport { useRef, useCallback } from 'react';\n\nfunction useFocusGesture({ whileFocus, visualElement, }) {\n    const isFocusActive = useRef(false);\n    const { animationState } = visualElement;\n    const onFocus = useCallback(() => {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = visualElement.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !animationState)\n            return;\n        animationState.setActive(AnimationType.Focus, true);\n        isFocusActive.current = true;\n    }, [animationState]);\n    const onBlur = useCallback(() => {\n        if (!isFocusActive.current || !animationState)\n            return;\n        animationState.setActive(AnimationType.Focus, false);\n        isFocusActive.current = false;\n    }, [animationState]);\n    useDomEvent(visualElement, \"focus\", whileFocus ? onFocus : undefined);\n    useDomEvent(visualElement, \"blur\", whileFocus ? onBlur : undefined);\n}\n\nexport { useFocusGesture };\n"]},"metadata":{},"sourceType":"module"}