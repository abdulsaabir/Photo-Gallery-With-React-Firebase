{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar data = require('./data.cjs.js');\n\nvar cssVar = require('./utils/css-var.cjs.js');\n\nvar utils = require('@motionone/utils');\n\nvar transforms = require('./utils/transforms.cjs.js');\n\nvar easing = require('./utils/easing.cjs.js');\n\nvar featureDetection = require('./utils/feature-detection.cjs.js');\n\nvar keyframes = require('./utils/keyframes.cjs.js');\n\nvar style = require('./style.cjs.js');\n\nvar getStyleName = require('./utils/get-style-name.cjs.js');\n\nvar stopAnimation = require('./utils/stop-animation.cjs.js');\n\nvar getUnit = require('./utils/get-unit.cjs.js');\n\nfunction getDevToolsRecord() {\n  return window.__MOTION_DEV_TOOLS_RECORD;\n}\n\nfunction animateStyle(element, key, keyframesDefinition, options = {}, AnimationPolyfill) {\n  const record = getDevToolsRecord();\n  const isRecording = options.record !== false && record;\n  let animation;\n  let {\n    duration = utils.defaults.duration,\n    delay = utils.defaults.delay,\n    endDelay = utils.defaults.endDelay,\n    repeat = utils.defaults.repeat,\n    easing: easing$1 = utils.defaults.easing,\n    persist = false,\n    direction,\n    offset,\n    allowWebkitAcceleration = false\n  } = options;\n  const data$1 = data.getAnimationData(element);\n  const valueIsTransform = transforms.isTransform(key);\n  let canAnimateNatively = featureDetection.supports.waapi();\n  /**\n   * If this is an individual transform, we need to map its\n   * key to a CSS variable and update the element's transform style\n   */\n\n  valueIsTransform && transforms.addTransformToElement(element, key);\n  const name = getStyleName.getStyleName(key);\n  const motionValue = data.getMotionValue(data$1.values, name);\n  /**\n   * Get definition of value, this will be used to convert numerical\n   * keyframes into the default value type.\n   */\n\n  const definition = transforms.transformDefinitions.get(name);\n  /**\n   * Stop the current animation, if any. Because this will trigger\n   * commitStyles (DOM writes) and we might later trigger DOM reads,\n   * this is fired now and we return a factory function to create\n   * the actual animation that can get called in batch,\n   */\n\n  stopAnimation.stopAnimation(motionValue.animation, !(utils.isEasingGenerator(easing$1) && motionValue.generator) && options.record !== false);\n  /**\n   * Batchable factory function containing all DOM reads.\n   */\n\n  return () => {\n    const readInitialValue = () => {\n      var _a, _b;\n\n      return (_b = (_a = style.style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0;\n    };\n    /**\n     * Replace null values with the previous keyframe value, or read\n     * it from the DOM if it's the first keyframe.\n     */\n\n\n    let keyframes$1 = keyframes.hydrateKeyframes(keyframes.keyframesList(keyframesDefinition), readInitialValue);\n    /**\n     * Detect unit type of keyframes.\n     */\n\n    const toUnit = getUnit.getUnitConverter(keyframes$1, definition);\n\n    if (utils.isEasingGenerator(easing$1)) {\n      const custom = easing$1.createAnimation(keyframes$1, key !== \"opacity\", readInitialValue, name, motionValue);\n      easing$1 = custom.easing;\n      keyframes$1 = custom.keyframes || keyframes$1;\n      duration = custom.duration || duration;\n    }\n    /**\n     * If this is a CSS variable we need to register it with the browser\n     * before it can be animated natively. We also set it with setProperty\n     * rather than directly onto the element.style object.\n     */\n\n\n    if (cssVar.isCssVar(name)) {\n      if (featureDetection.supports.cssRegisterProperty()) {\n        cssVar.registerCssVariable(name);\n      } else {\n        canAnimateNatively = false;\n      }\n    }\n    /**\n     * If we've been passed a custom easing function, and this browser\n     * does **not** support linear() easing, and the value is a transform\n     * (and thus a pure number) we can still support the custom easing\n     * by falling back to the animation polyfill.\n     */\n\n\n    if (valueIsTransform && !featureDetection.supports.linearEasing() && (utils.isFunction(easing$1) || utils.isEasingList(easing$1) && easing$1.some(utils.isFunction))) {\n      canAnimateNatively = false;\n    }\n    /**\n     * If we can animate this value with WAAPI, do so.\n     */\n\n\n    if (canAnimateNatively) {\n      /**\n       * Convert numbers to default value types. Currently this only supports\n       * transforms but it could also support other value types.\n       */\n      if (definition) {\n        keyframes$1 = keyframes$1.map(value => utils.isNumber(value) ? definition.toDefaultUnit(value) : value);\n      }\n      /**\n       * If this browser doesn't support partial/implicit keyframes we need to\n       * explicitly provide one.\n       */\n\n\n      if (keyframes$1.length === 1 && (!featureDetection.supports.partialKeyframes() || isRecording)) {\n        keyframes$1.unshift(readInitialValue());\n      }\n\n      const animationOptions = {\n        delay: utils.time.ms(delay),\n        duration: utils.time.ms(duration),\n        endDelay: utils.time.ms(endDelay),\n        easing: !utils.isEasingList(easing$1) ? easing.convertEasing(easing$1, duration) : undefined,\n        direction,\n        iterations: repeat + 1,\n        fill: \"both\"\n      };\n      animation = element.animate({\n        [name]: keyframes$1,\n        offset,\n        easing: utils.isEasingList(easing$1) ? easing$1.map(thisEasing => easing.convertEasing(thisEasing, duration)) : undefined\n      }, animationOptions);\n      /**\n       * Polyfill finished Promise in browsers that don't support it\n       */\n\n      if (!animation.finished) {\n        animation.finished = new Promise((resolve, reject) => {\n          animation.onfinish = resolve;\n          animation.oncancel = reject;\n        });\n      }\n\n      const target = keyframes$1[keyframes$1.length - 1];\n      animation.finished.then(() => {\n        if (persist) return; // Apply styles to target\n\n        style.style.set(element, name, target); // Ensure fill modes don't persist\n\n        animation.cancel();\n      }).catch(utils.noop);\n      /**\n       * This forces Webkit to run animations on the main thread by exploiting\n       * this condition:\n       * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\n       *\n       * This fixes Webkit's timing bugs, like accelerated animations falling\n       * out of sync with main thread animations and massive delays in starting\n       * accelerated animations in WKWebView.\n       */\n\n      if (!allowWebkitAcceleration) animation.playbackRate = 1.000001;\n      /**\n       * If we can't animate the value natively then we can fallback to the numbers-only\n       * polyfill for transforms.\n       */\n    } else if (AnimationPolyfill && valueIsTransform) {\n      /**\n       * If any keyframe is a string (because we measured it from the DOM), we need to convert\n       * it into a number before passing to the Animation polyfill.\n       */\n      keyframes$1 = keyframes$1.map(value => typeof value === \"string\" ? parseFloat(value) : value);\n      /**\n       * If we only have a single keyframe, we need to create an initial keyframe by reading\n       * the current value from the DOM.\n       */\n\n      if (keyframes$1.length === 1) {\n        keyframes$1.unshift(parseFloat(readInitialValue()));\n      }\n\n      animation = new AnimationPolyfill(latest => {\n        style.style.set(element, name, toUnit ? toUnit(latest) : latest);\n      }, keyframes$1, Object.assign(Object.assign({}, options), {\n        duration,\n        easing: easing$1\n      }));\n    } else {\n      const target = keyframes$1[keyframes$1.length - 1];\n      style.style.set(element, name, definition && utils.isNumber(target) ? definition.toDefaultUnit(target) : target);\n    }\n\n    if (isRecording) {\n      record(element, key, keyframes$1, {\n        duration,\n        delay: delay,\n        easing: easing$1,\n        repeat,\n        offset\n      }, \"motion-one\");\n    }\n\n    motionValue.setAnimation(animation);\n    return animation;\n  };\n}\n\nexports.animateStyle = animateStyle;","map":{"version":3,"sources":["/home/abdulsaabir/Documents/Projects/React/Tutorial Projects/Photo-Gallery-With-React-Firebase/node_modules/@motionone/dom/dist/animate/animate-style.cjs.js"],"names":["Object","defineProperty","exports","value","data","require","cssVar","utils","transforms","easing","featureDetection","keyframes","style","getStyleName","stopAnimation","getUnit","getDevToolsRecord","window","__MOTION_DEV_TOOLS_RECORD","animateStyle","element","key","keyframesDefinition","options","AnimationPolyfill","record","isRecording","animation","duration","defaults","delay","endDelay","repeat","easing$1","persist","direction","offset","allowWebkitAcceleration","data$1","getAnimationData","valueIsTransform","isTransform","canAnimateNatively","supports","waapi","addTransformToElement","name","motionValue","getMotionValue","values","definition","transformDefinitions","get","isEasingGenerator","generator","readInitialValue","_a","_b","initialValue","keyframes$1","hydrateKeyframes","keyframesList","toUnit","getUnitConverter","custom","createAnimation","isCssVar","cssRegisterProperty","registerCssVariable","linearEasing","isFunction","isEasingList","some","map","isNumber","toDefaultUnit","length","partialKeyframes","unshift","animationOptions","time","ms","convertEasing","undefined","iterations","fill","animate","thisEasing","finished","Promise","resolve","reject","onfinish","oncancel","target","then","set","cancel","catch","noop","playbackRate","parseFloat","latest","assign","setAnimation"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar data = require('./data.cjs.js');\nvar cssVar = require('./utils/css-var.cjs.js');\nvar utils = require('@motionone/utils');\nvar transforms = require('./utils/transforms.cjs.js');\nvar easing = require('./utils/easing.cjs.js');\nvar featureDetection = require('./utils/feature-detection.cjs.js');\nvar keyframes = require('./utils/keyframes.cjs.js');\nvar style = require('./style.cjs.js');\nvar getStyleName = require('./utils/get-style-name.cjs.js');\nvar stopAnimation = require('./utils/stop-animation.cjs.js');\nvar getUnit = require('./utils/get-unit.cjs.js');\n\nfunction getDevToolsRecord() {\n    return window.__MOTION_DEV_TOOLS_RECORD;\n}\nfunction animateStyle(element, key, keyframesDefinition, options = {}, AnimationPolyfill) {\n    const record = getDevToolsRecord();\n    const isRecording = options.record !== false && record;\n    let animation;\n    let { duration = utils.defaults.duration, delay = utils.defaults.delay, endDelay = utils.defaults.endDelay, repeat = utils.defaults.repeat, easing: easing$1 = utils.defaults.easing, persist = false, direction, offset, allowWebkitAcceleration = false, } = options;\n    const data$1 = data.getAnimationData(element);\n    const valueIsTransform = transforms.isTransform(key);\n    let canAnimateNatively = featureDetection.supports.waapi();\n    /**\n     * If this is an individual transform, we need to map its\n     * key to a CSS variable and update the element's transform style\n     */\n    valueIsTransform && transforms.addTransformToElement(element, key);\n    const name = getStyleName.getStyleName(key);\n    const motionValue = data.getMotionValue(data$1.values, name);\n    /**\n     * Get definition of value, this will be used to convert numerical\n     * keyframes into the default value type.\n     */\n    const definition = transforms.transformDefinitions.get(name);\n    /**\n     * Stop the current animation, if any. Because this will trigger\n     * commitStyles (DOM writes) and we might later trigger DOM reads,\n     * this is fired now and we return a factory function to create\n     * the actual animation that can get called in batch,\n     */\n    stopAnimation.stopAnimation(motionValue.animation, !(utils.isEasingGenerator(easing$1) && motionValue.generator) &&\n        options.record !== false);\n    /**\n     * Batchable factory function containing all DOM reads.\n     */\n    return () => {\n        const readInitialValue = () => { var _a, _b; return (_b = (_a = style.style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0; };\n        /**\n         * Replace null values with the previous keyframe value, or read\n         * it from the DOM if it's the first keyframe.\n         */\n        let keyframes$1 = keyframes.hydrateKeyframes(keyframes.keyframesList(keyframesDefinition), readInitialValue);\n        /**\n         * Detect unit type of keyframes.\n         */\n        const toUnit = getUnit.getUnitConverter(keyframes$1, definition);\n        if (utils.isEasingGenerator(easing$1)) {\n            const custom = easing$1.createAnimation(keyframes$1, key !== \"opacity\", readInitialValue, name, motionValue);\n            easing$1 = custom.easing;\n            keyframes$1 = custom.keyframes || keyframes$1;\n            duration = custom.duration || duration;\n        }\n        /**\n         * If this is a CSS variable we need to register it with the browser\n         * before it can be animated natively. We also set it with setProperty\n         * rather than directly onto the element.style object.\n         */\n        if (cssVar.isCssVar(name)) {\n            if (featureDetection.supports.cssRegisterProperty()) {\n                cssVar.registerCssVariable(name);\n            }\n            else {\n                canAnimateNatively = false;\n            }\n        }\n        /**\n         * If we've been passed a custom easing function, and this browser\n         * does **not** support linear() easing, and the value is a transform\n         * (and thus a pure number) we can still support the custom easing\n         * by falling back to the animation polyfill.\n         */\n        if (valueIsTransform &&\n            !featureDetection.supports.linearEasing() &&\n            (utils.isFunction(easing$1) || (utils.isEasingList(easing$1) && easing$1.some(utils.isFunction)))) {\n            canAnimateNatively = false;\n        }\n        /**\n         * If we can animate this value with WAAPI, do so.\n         */\n        if (canAnimateNatively) {\n            /**\n             * Convert numbers to default value types. Currently this only supports\n             * transforms but it could also support other value types.\n             */\n            if (definition) {\n                keyframes$1 = keyframes$1.map((value) => utils.isNumber(value) ? definition.toDefaultUnit(value) : value);\n            }\n            /**\n             * If this browser doesn't support partial/implicit keyframes we need to\n             * explicitly provide one.\n             */\n            if (keyframes$1.length === 1 &&\n                (!featureDetection.supports.partialKeyframes() || isRecording)) {\n                keyframes$1.unshift(readInitialValue());\n            }\n            const animationOptions = {\n                delay: utils.time.ms(delay),\n                duration: utils.time.ms(duration),\n                endDelay: utils.time.ms(endDelay),\n                easing: !utils.isEasingList(easing$1)\n                    ? easing.convertEasing(easing$1, duration)\n                    : undefined,\n                direction,\n                iterations: repeat + 1,\n                fill: \"both\",\n            };\n            animation = element.animate({\n                [name]: keyframes$1,\n                offset,\n                easing: utils.isEasingList(easing$1)\n                    ? easing$1.map((thisEasing) => easing.convertEasing(thisEasing, duration))\n                    : undefined,\n            }, animationOptions);\n            /**\n             * Polyfill finished Promise in browsers that don't support it\n             */\n            if (!animation.finished) {\n                animation.finished = new Promise((resolve, reject) => {\n                    animation.onfinish = resolve;\n                    animation.oncancel = reject;\n                });\n            }\n            const target = keyframes$1[keyframes$1.length - 1];\n            animation.finished\n                .then(() => {\n                if (persist)\n                    return;\n                // Apply styles to target\n                style.style.set(element, name, target);\n                // Ensure fill modes don't persist\n                animation.cancel();\n            })\n                .catch(utils.noop);\n            /**\n             * This forces Webkit to run animations on the main thread by exploiting\n             * this condition:\n             * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\n             *\n             * This fixes Webkit's timing bugs, like accelerated animations falling\n             * out of sync with main thread animations and massive delays in starting\n             * accelerated animations in WKWebView.\n             */\n            if (!allowWebkitAcceleration)\n                animation.playbackRate = 1.000001;\n            /**\n             * If we can't animate the value natively then we can fallback to the numbers-only\n             * polyfill for transforms.\n             */\n        }\n        else if (AnimationPolyfill && valueIsTransform) {\n            /**\n             * If any keyframe is a string (because we measured it from the DOM), we need to convert\n             * it into a number before passing to the Animation polyfill.\n             */\n            keyframes$1 = keyframes$1.map((value) => typeof value === \"string\" ? parseFloat(value) : value);\n            /**\n             * If we only have a single keyframe, we need to create an initial keyframe by reading\n             * the current value from the DOM.\n             */\n            if (keyframes$1.length === 1) {\n                keyframes$1.unshift(parseFloat(readInitialValue()));\n            }\n            animation = new AnimationPolyfill((latest) => {\n                style.style.set(element, name, toUnit ? toUnit(latest) : latest);\n            }, keyframes$1, Object.assign(Object.assign({}, options), { duration,\n                easing: easing$1 }));\n        }\n        else {\n            const target = keyframes$1[keyframes$1.length - 1];\n            style.style.set(element, name, definition && utils.isNumber(target)\n                ? definition.toDefaultUnit(target)\n                : target);\n        }\n        if (isRecording) {\n            record(element, key, keyframes$1, {\n                duration,\n                delay: delay,\n                easing: easing$1,\n                repeat,\n                offset,\n            }, \"motion-one\");\n        }\n        motionValue.setAnimation(animation);\n        return animation;\n    };\n}\n\nexports.animateStyle = animateStyle;\n"]},"metadata":{},"sourceType":"script"}