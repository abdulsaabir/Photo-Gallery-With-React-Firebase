{"ast":null,"code":"import { AnimationType } from '../render/utils/types.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { useMemo } from 'react';\n\nfunction createHoverEvent(visualElement, isActive, applyVariants, callback) {\n  return (event, info) => {\n    if (event.type === \"touch\" || isDragActive()) return;\n    /**\n     * Ensure we trigger animations before firing event callback\n     */\n\n    if (applyVariants && visualElement.animationState) {\n      visualElement.animationState.setActive(AnimationType.Hover, isActive);\n    }\n\n    callback && callback(event, info);\n  };\n}\n\nfunction useHoverGesture({\n  onHoverStart,\n  onHoverEnd,\n  whileHover,\n  visualElement\n}) {\n  usePointerEvent(visualElement, \"pointerenter\", useMemo(() => {\n    return onHoverStart || whileHover ? createHoverEvent(visualElement, true, Boolean(whileHover), onHoverStart) : undefined;\n  }, [onHoverStart, Boolean(whileHover), visualElement]), {\n    passive: !onHoverStart\n  });\n  usePointerEvent(visualElement, \"pointerleave\", useMemo(() => {\n    return onHoverEnd || whileHover ? createHoverEvent(visualElement, false, Boolean(whileHover), onHoverEnd) : undefined;\n  }, [onHoverStart, Boolean(whileHover), visualElement]), {\n    passive: !onHoverEnd\n  });\n}\n\nexport { useHoverGesture };","map":{"version":3,"sources":["/home/abdulsaabir/Documents/Projects/React/Tutorial Projects/Photo-Gallery-With-React-Firebase/node_modules/framer-motion/dist/es/gestures/use-hover-gesture.mjs"],"names":["AnimationType","usePointerEvent","isDragActive","useMemo","createHoverEvent","visualElement","isActive","applyVariants","callback","event","info","type","animationState","setActive","Hover","useHoverGesture","onHoverStart","onHoverEnd","whileHover","Boolean","undefined","passive"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,OAAT,QAAwB,OAAxB;;AAEA,SAASC,gBAAT,CAA0BC,aAA1B,EAAyCC,QAAzC,EAAmDC,aAAnD,EAAkEC,QAAlE,EAA4E;AACxE,SAAO,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACpB,QAAID,KAAK,CAACE,IAAN,KAAe,OAAf,IAA0BT,YAAY,EAA1C,EACI;AACJ;;;;AAGA,QAAIK,aAAa,IAAIF,aAAa,CAACO,cAAnC,EAAmD;AAC/CP,MAAAA,aAAa,CAACO,cAAd,CAA6BC,SAA7B,CAAuCb,aAAa,CAACc,KAArD,EAA4DR,QAA5D;AACH;;AACDE,IAAAA,QAAQ,IAAIA,QAAQ,CAACC,KAAD,EAAQC,IAAR,CAApB;AACH,GAVD;AAWH;;AACD,SAASK,eAAT,CAAyB;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,UAAhB;AAA4BC,EAAAA,UAA5B;AAAwCb,EAAAA;AAAxC,CAAzB,EAAmF;AAC/EJ,EAAAA,eAAe,CAACI,aAAD,EAAgB,cAAhB,EAAgCF,OAAO,CAAC,MAAM;AACzD,WAAOa,YAAY,IAAIE,UAAhB,GACDd,gBAAgB,CAACC,aAAD,EAAgB,IAAhB,EAAsBc,OAAO,CAACD,UAAD,CAA7B,EAA2CF,YAA3C,CADf,GAEDI,SAFN;AAGH,GAJqD,EAInD,CAACJ,YAAD,EAAeG,OAAO,CAACD,UAAD,CAAtB,EAAoCb,aAApC,CAJmD,CAAvC,EAIyC;AAAEgB,IAAAA,OAAO,EAAE,CAACL;AAAZ,GAJzC,CAAf;AAKAf,EAAAA,eAAe,CAACI,aAAD,EAAgB,cAAhB,EAAgCF,OAAO,CAAC,MAAM;AACzD,WAAOc,UAAU,IAAIC,UAAd,GACDd,gBAAgB,CAACC,aAAD,EAAgB,KAAhB,EAAuBc,OAAO,CAACD,UAAD,CAA9B,EAA4CD,UAA5C,CADf,GAEDG,SAFN;AAGH,GAJqD,EAInD,CAACJ,YAAD,EAAeG,OAAO,CAACD,UAAD,CAAtB,EAAoCb,aAApC,CAJmD,CAAvC,EAIyC;AAAEgB,IAAAA,OAAO,EAAE,CAACJ;AAAZ,GAJzC,CAAf;AAKH;;AAED,SAASF,eAAT","sourcesContent":["import { AnimationType } from '../render/utils/types.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { useMemo } from 'react';\n\nfunction createHoverEvent(visualElement, isActive, applyVariants, callback) {\n    return (event, info) => {\n        if (event.type === \"touch\" || isDragActive())\n            return;\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (applyVariants && visualElement.animationState) {\n            visualElement.animationState.setActive(AnimationType.Hover, isActive);\n        }\n        callback && callback(event, info);\n    };\n}\nfunction useHoverGesture({ onHoverStart, onHoverEnd, whileHover, visualElement, }) {\n    usePointerEvent(visualElement, \"pointerenter\", useMemo(() => {\n        return onHoverStart || whileHover\n            ? createHoverEvent(visualElement, true, Boolean(whileHover), onHoverStart)\n            : undefined;\n    }, [onHoverStart, Boolean(whileHover), visualElement]), { passive: !onHoverStart });\n    usePointerEvent(visualElement, \"pointerleave\", useMemo(() => {\n        return onHoverEnd || whileHover\n            ? createHoverEvent(visualElement, false, Boolean(whileHover), onHoverEnd)\n            : undefined;\n    }, [onHoverStart, Boolean(whileHover), visualElement]), { passive: !onHoverEnd });\n}\n\nexport { useHoverGesture };\n"]},"metadata":{},"sourceType":"module"}