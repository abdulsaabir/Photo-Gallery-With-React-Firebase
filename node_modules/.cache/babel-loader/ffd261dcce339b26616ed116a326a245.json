{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar heyListen = require('hey-listen');\n\nvar animateStyle = require('./animate-style.cjs.js');\n\nvar options = require('./utils/options.cjs.js');\n\nvar resolveElements = require('../utils/resolve-elements.cjs.js');\n\nvar controls = require('./utils/controls.cjs.js');\n\nvar stagger = require('../utils/stagger.cjs.js');\n\nfunction createAnimate(AnimatePolyfill) {\n  return function animate(elements, keyframes, options$1 = {}) {\n    elements = resolveElements.resolveElements(elements);\n    const numElements = elements.length;\n    heyListen.invariant(Boolean(numElements), \"No valid element provided.\");\n    heyListen.invariant(Boolean(keyframes), \"No keyframes defined.\");\n    /**\n     * Create and start new animations\n     */\n\n    const animationFactories = [];\n\n    for (let i = 0; i < numElements; i++) {\n      const element = elements[i];\n\n      for (const key in keyframes) {\n        const valueOptions = options.getOptions(options$1, key);\n        valueOptions.delay = stagger.resolveOption(valueOptions.delay, i, numElements);\n        const animation = animateStyle.animateStyle(element, key, keyframes[key], valueOptions, AnimatePolyfill);\n        animationFactories.push(animation);\n      }\n    }\n\n    return controls.withControls(animationFactories, options$1,\n    /**\n     * TODO:\n     * If easing is set to spring or glide, duration will be dynamically\n     * generated. Ideally we would dynamically generate this from\n     * animation.effect.getComputedTiming().duration but this isn't\n     * supported in iOS13 or our number polyfill. Perhaps it's possible\n     * to Proxy animations returned from animateStyle that has duration\n     * as a getter.\n     */\n    options$1.duration);\n  };\n}\n\nexports.createAnimate = createAnimate;","map":{"version":3,"sources":["/home/abdulsaabir/Documents/Projects/React/Tutorial Projects/Photo-Gallery-With-React-Firebase/node_modules/@motionone/dom/dist/animate/create-animate.cjs.js"],"names":["Object","defineProperty","exports","value","heyListen","require","animateStyle","options","resolveElements","controls","stagger","createAnimate","AnimatePolyfill","animate","elements","keyframes","options$1","numElements","length","invariant","Boolean","animationFactories","i","element","key","valueOptions","getOptions","delay","resolveOption","animation","push","withControls","duration"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,wBAAD,CAA1B;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAArB;;AACA,IAAIG,eAAe,GAAGH,OAAO,CAAC,kCAAD,CAA7B;;AACA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,yBAAD,CAAtB;;AACA,IAAIK,OAAO,GAAGL,OAAO,CAAC,yBAAD,CAArB;;AAEA,SAASM,aAAT,CAAuBC,eAAvB,EAAwC;AACpC,SAAO,SAASC,OAAT,CAAiBC,QAAjB,EAA2BC,SAA3B,EAAsCC,SAAS,GAAG,EAAlD,EAAsD;AACzDF,IAAAA,QAAQ,GAAGN,eAAe,CAACA,eAAhB,CAAgCM,QAAhC,CAAX;AACA,UAAMG,WAAW,GAAGH,QAAQ,CAACI,MAA7B;AACAd,IAAAA,SAAS,CAACe,SAAV,CAAoBC,OAAO,CAACH,WAAD,CAA3B,EAA0C,4BAA1C;AACAb,IAAAA,SAAS,CAACe,SAAV,CAAoBC,OAAO,CAACL,SAAD,CAA3B,EAAwC,uBAAxC;AACA;;;;AAGA,UAAMM,kBAAkB,GAAG,EAA3B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,WAApB,EAAiCK,CAAC,EAAlC,EAAsC;AAClC,YAAMC,OAAO,GAAGT,QAAQ,CAACQ,CAAD,CAAxB;;AACA,WAAK,MAAME,GAAX,IAAkBT,SAAlB,EAA6B;AACzB,cAAMU,YAAY,GAAGlB,OAAO,CAACmB,UAAR,CAAmBV,SAAnB,EAA8BQ,GAA9B,CAArB;AACAC,QAAAA,YAAY,CAACE,KAAb,GAAqBjB,OAAO,CAACkB,aAAR,CAAsBH,YAAY,CAACE,KAAnC,EAA0CL,CAA1C,EAA6CL,WAA7C,CAArB;AACA,cAAMY,SAAS,GAAGvB,YAAY,CAACA,YAAb,CAA0BiB,OAA1B,EAAmCC,GAAnC,EAAwCT,SAAS,CAACS,GAAD,CAAjD,EAAwDC,YAAxD,EAAsEb,eAAtE,CAAlB;AACAS,QAAAA,kBAAkB,CAACS,IAAnB,CAAwBD,SAAxB;AACH;AACJ;;AACD,WAAOpB,QAAQ,CAACsB,YAAT,CAAsBV,kBAAtB,EAA0CL,SAA1C;AACP;;;;;;;;;AASAA,IAAAA,SAAS,CAACgB,QAVH,CAAP;AAWH,GA7BD;AA8BH;;AAED9B,OAAO,CAACS,aAAR,GAAwBA,aAAxB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar heyListen = require('hey-listen');\nvar animateStyle = require('./animate-style.cjs.js');\nvar options = require('./utils/options.cjs.js');\nvar resolveElements = require('../utils/resolve-elements.cjs.js');\nvar controls = require('./utils/controls.cjs.js');\nvar stagger = require('../utils/stagger.cjs.js');\n\nfunction createAnimate(AnimatePolyfill) {\n    return function animate(elements, keyframes, options$1 = {}) {\n        elements = resolveElements.resolveElements(elements);\n        const numElements = elements.length;\n        heyListen.invariant(Boolean(numElements), \"No valid element provided.\");\n        heyListen.invariant(Boolean(keyframes), \"No keyframes defined.\");\n        /**\n         * Create and start new animations\n         */\n        const animationFactories = [];\n        for (let i = 0; i < numElements; i++) {\n            const element = elements[i];\n            for (const key in keyframes) {\n                const valueOptions = options.getOptions(options$1, key);\n                valueOptions.delay = stagger.resolveOption(valueOptions.delay, i, numElements);\n                const animation = animateStyle.animateStyle(element, key, keyframes[key], valueOptions, AnimatePolyfill);\n                animationFactories.push(animation);\n            }\n        }\n        return controls.withControls(animationFactories, options$1, \n        /**\n         * TODO:\n         * If easing is set to spring or glide, duration will be dynamically\n         * generated. Ideally we would dynamically generate this from\n         * animation.effect.getComputedTiming().duration but this isn't\n         * supported in iOS13 or our number polyfill. Perhaps it's possible\n         * to Proxy animations returned from animateStyle that has duration\n         * as a getter.\n         */\n        options$1.duration);\n    };\n}\n\nexports.createAnimate = createAnimate;\n"]},"metadata":{},"sourceType":"script"}